package com.niit.skillmapper.controller;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class RegistrationController
 */
@WebServlet("/RegistrationController")
public class RegistrationController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	// Keep a set of strings to record form processing errors.
	 
	 
    /**
     * @see HttpServlet#HttpServlet()
     */
    public RegistrationController() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
	
		// Keep a set of strings to record form processing errors.
		22 List errorMsgs = new LinkedList();
		23 // Store this set in the request scope, in case we need to
		24 // send the ErrorPage view.
		25 request.setAttribute(“errorMsgs”, errorMsgs);
		
		String name = request.getParameter("fullname");
		String Addr = request.getParameter("address");
		String age = request.getParameter("age");
		String Qual = request.getParameter("qual");
		String Persent = request.getParameter("percent");
		String Year = request.getParameter("yop");
	
		
		// Retrieve form parameters.
		26 String yearStr = request.getParameter(“year”).trim();
		27 String season = request.getParameter(“season”).trim();
		28 String title = request.getParameter(“title”).trim();
		29
		30 // Perform data conversions.
		31 int year = -1;
		32 try {
		33 year = Integer.parseInt(yearStr);
		34 } catch (NumberFormatException nfe) {
		
		errorMsgs.add(“The ‘year’ field must be a positive integer.”)
		36 }
		
		// Verify form parameters
		39 if ( (year != -1) && ((year < 2000) || (year > 2010)) ) {
		40 errorMsgs.add(“The ‘year’ field must within 2000 to 2010.”);
		41 }
		42 if ( season.equals(“UNKNOWN”) ) {
		43 errorMsgs.add(“Please select a league season.”);
		44 }
		45 if ( title.length() == 0 ) {
		46 errorMsgs.add(“Please enter the title of the league.”);
		47 }
		48
		49 // Send the ErrorPage view if there were errors
		// Verify form parameters
		43 if ( (year != -1) && ((year < 2000) || (year > 2010)) ) {
		44 errorMsgs.add(“The ‘year’ field must within 2000 to 2010.”);
		45 }
		46 if ( season.equals(“UNKNOWN”) ) {
		47 errorMsgs.add(“Please select a league season.”);
		48 }
		49 if ( title.length() == 0 ) {
		50 errorMsgs.add(“Please enter the title of the league.”);
		51 }
		52
		53 // Send the ErrorPage view if there were errors
		54 if ( ! errorMsgs.isEmpty() ) {
		55 RequestDispatcher view
		56 = request.getRequestDispatcher(“error_page.view”);
		57 view.forward(request, response);
		58 return;
		59 }
		if(name.isEmpty()||Addr.isEmpty()||age.isEmpty()||Qual.isEmpty()||Persent.isEmpty()||Year.isEmpty())
		{
			RequestDispatcher rd = request.getRequestDispatcher("registration.jsp");
			out.println("<font color=red>Please fill all the fields</font>");
			rd.include(request, response);
		}
		else
		{
			RequestDispatcher rd = request.getRequestDispatcher("home.jsp");
			rd.forward(request, response);
		}
		// Perform business logic
		62 League league = new League(year, season, title);
		63 // Store the new league in the request-scope
		64 request.setAttribute(“league”, league);
		65
		66 // Send the Success view
		67 RequestDispatcher view
		68 = request.getRequestDispatcher(“success.view”);
		69 view.forward(request, response);
		70 return;
		
		/*
		 * catch (RuntimeException e) {
68 errorMsgs.add(e.getMessage());
69 // dispatch to the ErrorPage
70 PrintWriter out = response.getWriter();
71 out.println(“ERROR PAGE”);
72
73 // Log stack trace
74 e.printStackTrace(System.err);
75
76 } // END of try-catch block
		 */
		
		
		// TODO Auto-generated method stub
		doGet(request, response);

	
	
	}

}
