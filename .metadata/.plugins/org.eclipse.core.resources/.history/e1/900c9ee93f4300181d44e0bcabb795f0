package com.niit.skillmapper.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
@WebServlet("/RegistrationController")
public class RegistrationController extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public RegistrationController() {
        super();
        // TODO Auto-generated constructor stub
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
	
		// Keep a set of strings to record form processing errors.
		 List errorMsgs = new LinkedList();
		 // Store this set in the request scope, in case we need to
		 // send the ErrorPage view.
		 request.setAttribute("errorMsgs", errorMsgs);
		
		String employeeId = request.getParameter("employeeId").trim();
		String employeeName = request.getParameter("employeeName").trim();
		String empPassword = request.getParameter("empPassword").trim();
		String deptname = request.getParameter("deptname").trim();
		String role_type = request.getParameter("role_type").trim();
		
		// Perform data conversions.
		 int empid = -1;
		 try {
		 empid = Integer.parseInt(employeeId);
		 }
		 catch (NumberFormatException nfe) {
				errorMsgs.add("The employee Id must be a positive integer.");
		 }		
		// Verify form parameters
		 if ( (empid != -1) && ((empid < 1) || (empid > 6)) ) {
		 errorMsgs.add("The employee field must within 1 to 9999");
		 }
		 if ( season.equals("UNKNOWN") ) {
		 errorMsgs.add("Please select a league season.");
		 }
		 if ( title.length() == 0 ) {
		 errorMsgs.add("Please enter the title of the league.");
		 }
		
		 // Send the ErrorPage view if there were errors
		// Verify form parameters
		 if ( (year != -1) && ((year < 2000) || (year > 2010)) ) {
		 errorMsgs.add("The ‘year’ field must within 2000 to 2010.");
		 }
		 
		 if ( title.length() == 0 ) {
		 errorMsgs.add("Please enter the title of the league.");
		 }
		
		 // Send the ErrorPage view if there were errors
		 if ( ! errorMsgs.isEmpty() ) {
		 RequestDispatcher view
		 = request.getRequestDispatcher("error_page.view");
		 view.forward(request, response);
		 return;
		 }
		if(name.isEmpty()||Addr.isEmpty()||age.isEmpty()||Qual.isEmpty()||Persent.isEmpty()||Year.isEmpty())
		{
			RequestDispatcher rd = request.getRequestDispatcher("registration.jsp");
			out.println("<font color=red>Please fill all the fields</font>");
			rd.include(request, response);
		}
		else
		{
			RequestDispatcher rd = request.getRequestDispatcher("home.jsp");
			rd.forward(request, response);
		}
		// Perform business logic
		 //League league = new League(year, season, title);
		 // Store the new league in the request-scope
		 request.setAttribute("league", league);
		
		 // Send the Success view
		 RequestDispatcher view
		 = request.getRequestDispatcher("success.view");
		 view.forward(request, response);
		 return;
		
			
		
		// TODO Auto-generated method stub
		doGet(request, response);

	
	
	}

}
